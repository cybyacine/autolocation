#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-one:server');
var http = require('http');
const cookieParser = require("cookie-parser");
const cookieSession = require("cookie-session");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

const io = require('socket.io')(server);

var sessionMiddleware = cookieSession({
    secret: process.env.COOKIE_SECRET,
    maxAge: 24 * 60 * 60 * 1000
})
const userController = require('../controllers/users')

io.use(function (socket, next) {
    sessionMiddleware(socket.request, socket.request.res || {}, next);
});

io.on('connection', async function (client) {
    console.log('Client connected...');
    // client.emit('message', 'hello from server')

    // client.on('chat message', function (data) {
    //   console.log(data);
    //   io.emit('chat message', data)
    // });

    const userId = client.request.session.userId;
    let user;
    if (userId) {
        user = await userController.findById(userId);
        if (user) {
            console.log('user connect :', user);
            io.emit('connection', JSON.stringify({email: user.email, full_name: user.full_name}));
        }
    }

});
